Resources:
  HelloLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: HelloLambdaRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: lambdaExecution-InstanceRefreshHandler
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - autoscaling:StartInstanceRefresh
                  - autoscaling:Describe*
                Resource: '*'

  HelloLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: HelloLambdaFunction
      Role: !GetAtt HelloLambdaRole.Arn
      Runtime: java11
      Handler: in.arvindsri82.cloud.InstanceRefreshOnSNSEvent
      MemorySize: 512
      Timeout: 300
      Code:
        S3Bucket: arvindsri82-lambda-functions
        S3Key: handler-function-v3.zip
      Environment:
        Variables:
          ASG_TAG_VALUE: "sys-monit-autoscaling-group"

  HelloLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref HelloLambdaFunction
      Principal: sns.amazonaws.com

  MyTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      TopicArn: arn:aws:sns:ap-south-1:244544013937:MyFirstTopic
      Endpoint: !GetAtt HelloLambdaFunction.Arn
      #FilterPolicy: '{"category":["Prod"]}'